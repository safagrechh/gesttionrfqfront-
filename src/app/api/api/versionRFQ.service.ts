/**
 * GestionRFQ API
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext 
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { Statut } from '../model/statut';
// @ts-ignore
import { VersionRFQ } from '../model/versionRFQ';
// @ts-ignore
import { VersionRFQDetailsDto } from '../model/versionRFQDetailsDto';
// @ts-ignore
import { VersionRFQSummaryDto } from '../model/versionRFQSummaryDto';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';



@Injectable({
  providedIn: 'root'
})
export class VersionRFQService {

    protected basePath = 'http://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string|string[], @Optional() configuration: Configuration) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            const firstBasePath = Array.isArray(basePath) ? basePath[0] : undefined;
            if (firstBasePath != undefined) {
                basePath = firstBasePath;
            }

            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }

    // @ts-ignore
    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        } else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }

    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {
        if (value == null) {
            return httpParams;
        }

        if (typeof value === "object") {
            if (Array.isArray(value)) {
                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            } else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, (value as Date).toISOString().substring(0, 10));
                } else {
                   throw Error("key may not be null if value is Date");
                }
            } else {
                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(
                    httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        } else if (key != null) {
            httpParams = httpParams.append(key, value);
        } else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }

    /**
     * @param rfqId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiVersionRFQByRfqRfqIdGet(rfqId: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext, transferCache?: boolean}): Observable<Array<VersionRFQSummaryDto>>;
    public apiVersionRFQByRfqRfqIdGet(rfqId: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<Array<VersionRFQSummaryDto>>>;
    public apiVersionRFQByRfqRfqIdGet(rfqId: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<Array<VersionRFQSummaryDto>>>;
    public apiVersionRFQByRfqRfqIdGet(rfqId: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (rfqId === null || rfqId === undefined) {
            throw new Error('Required parameter rfqId was null or undefined when calling apiVersionRFQByRfqRfqIdGet.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Bearer) required
        localVarCredential = this.configuration.lookupCredential('Bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/VersionRFQ/by-rfq/${this.configuration.encodeParam({name: "rfqId", value: rfqId, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int32"})}`;
        return this.httpClient.request<Array<VersionRFQSummaryDto>>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiVersionRFQGet(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext, transferCache?: boolean}): Observable<Array<VersionRFQSummaryDto>>;
    public apiVersionRFQGet(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<Array<VersionRFQSummaryDto>>>;
    public apiVersionRFQGet(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<Array<VersionRFQSummaryDto>>>;
    public apiVersionRFQGet(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Bearer) required
        localVarCredential = this.configuration.lookupCredential('Bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/VersionRFQ`;
        return this.httpClient.request<Array<VersionRFQSummaryDto>>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiVersionRFQIdDelete(id: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any>;
    public apiVersionRFQIdDelete(id: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<any>>;
    public apiVersionRFQIdDelete(id: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<any>>;
    public apiVersionRFQIdDelete(id: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling apiVersionRFQIdDelete.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Bearer) required
        localVarCredential = this.configuration.lookupCredential('Bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/VersionRFQ/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int32"})}`;
        return this.httpClient.request<any>('delete', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiVersionRFQIdFileGet(id: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any>;
    public apiVersionRFQIdFileGet(id: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<any>>;
    public apiVersionRFQIdFileGet(id: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<any>>;
    public apiVersionRFQIdFileGet(id: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling apiVersionRFQIdFileGet.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Bearer) required
        localVarCredential = this.configuration.lookupCredential('Bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/VersionRFQ/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int32"})}/file`;
        return this.httpClient.request<any>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiVersionRFQIdGet(id: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext, transferCache?: boolean}): Observable<VersionRFQDetailsDto>;
    public apiVersionRFQIdGet(id: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<VersionRFQDetailsDto>>;
    public apiVersionRFQIdGet(id: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<VersionRFQDetailsDto>>;
    public apiVersionRFQIdGet(id: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling apiVersionRFQIdGet.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Bearer) required
        localVarCredential = this.configuration.lookupCredential('Bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/VersionRFQ/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int32"})}`;
        return this.httpClient.request<VersionRFQDetailsDto>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param id 
     * @param cQ 
     * @param quoteName 
     * @param numRefQuoted 
     * @param sOPDate 
     * @param maxV 
     * @param estV 
     * @param kODate 
     * @param customerDataDate 
     * @param mDDate 
     * @param mRDate 
     * @param tDDate 
     * @param tRDate 
     * @param lDDate 
     * @param lRDate 
     * @param cDDate 
     * @param approvalDate 
     * @param materialLeaderId 
     * @param testLeaderId 
     * @param marketSegmentId 
     * @param ingenieurRFQId 
     * @param vALeaderId 
     * @param clientId 
     * @param valide 
     * @param rejete 
     * @param file 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiVersionRFQIdPut(id: number, cQ?: number, quoteName?: string, numRefQuoted?: number, sOPDate?: string, maxV?: number, estV?: number, kODate?: string, customerDataDate?: string, mDDate?: string, mRDate?: string, tDDate?: string, tRDate?: string, lDDate?: string, lRDate?: string, cDDate?: string, approvalDate?: string, materialLeaderId?: number, testLeaderId?: number, marketSegmentId?: number, ingenieurRFQId?: number, vALeaderId?: number, clientId?: number, valide?: boolean, rejete?: boolean, file?: Blob, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext, transferCache?: boolean}): Observable<VersionRFQ>;
    public apiVersionRFQIdPut(id: number, cQ?: number, quoteName?: string, numRefQuoted?: number, sOPDate?: string, maxV?: number, estV?: number, kODate?: string, customerDataDate?: string, mDDate?: string, mRDate?: string, tDDate?: string, tRDate?: string, lDDate?: string, lRDate?: string, cDDate?: string, approvalDate?: string, materialLeaderId?: number, testLeaderId?: number, marketSegmentId?: number, ingenieurRFQId?: number, vALeaderId?: number, clientId?: number, valide?: boolean, rejete?: boolean, file?: Blob, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<VersionRFQ>>;
    public apiVersionRFQIdPut(id: number, cQ?: number, quoteName?: string, numRefQuoted?: number, sOPDate?: string, maxV?: number, estV?: number, kODate?: string, customerDataDate?: string, mDDate?: string, mRDate?: string, tDDate?: string, tRDate?: string, lDDate?: string, lRDate?: string, cDDate?: string, approvalDate?: string, materialLeaderId?: number, testLeaderId?: number, marketSegmentId?: number, ingenieurRFQId?: number, vALeaderId?: number, clientId?: number, valide?: boolean, rejete?: boolean, file?: Blob, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<VersionRFQ>>;
    public apiVersionRFQIdPut(id: number, cQ?: number, quoteName?: string, numRefQuoted?: number, sOPDate?: string, maxV?: number, estV?: number, kODate?: string, customerDataDate?: string, mDDate?: string, mRDate?: string, tDDate?: string, tRDate?: string, lDDate?: string, lRDate?: string, cDDate?: string, approvalDate?: string, materialLeaderId?: number, testLeaderId?: number, marketSegmentId?: number, ingenieurRFQId?: number, vALeaderId?: number, clientId?: number, valide?: boolean, rejete?: boolean, file?: Blob, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling apiVersionRFQIdPut.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Bearer) required
        localVarCredential = this.configuration.lookupCredential('Bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let localVarFormParams: { append(param: string, value: any): any; };
        let localVarUseForm = false;
        let localVarConvertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        localVarUseForm = canConsumeForm;
        if (localVarUseForm) {
            localVarFormParams = new FormData();
        } else {
            localVarFormParams = new HttpParams({encoder: this.encoder});
        }

        if (cQ !== undefined) {
            localVarFormParams = localVarFormParams.append('CQ', <any>cQ) as any || localVarFormParams;
        }
        if (quoteName !== undefined) {
            localVarFormParams = localVarFormParams.append('QuoteName', <any>quoteName) as any || localVarFormParams;
        }
        if (numRefQuoted !== undefined) {
            localVarFormParams = localVarFormParams.append('NumRefQuoted', <any>numRefQuoted) as any || localVarFormParams;
        }
        if (sOPDate !== undefined) {
            localVarFormParams = localVarFormParams.append('SOPDate', <any>sOPDate) as any || localVarFormParams;
        }
        if (maxV !== undefined) {
            localVarFormParams = localVarFormParams.append('MaxV', <any>maxV) as any || localVarFormParams;
        }
        if (estV !== undefined) {
            localVarFormParams = localVarFormParams.append('EstV', <any>estV) as any || localVarFormParams;
        }
        if (kODate !== undefined) {
            localVarFormParams = localVarFormParams.append('KODate', <any>kODate) as any || localVarFormParams;
        }
        if (customerDataDate !== undefined) {
            localVarFormParams = localVarFormParams.append('CustomerDataDate', <any>customerDataDate) as any || localVarFormParams;
        }
        if (mDDate !== undefined) {
            localVarFormParams = localVarFormParams.append('MDDate', <any>mDDate) as any || localVarFormParams;
        }
        if (mRDate !== undefined) {
            localVarFormParams = localVarFormParams.append('MRDate', <any>mRDate) as any || localVarFormParams;
        }
        if (tDDate !== undefined) {
            localVarFormParams = localVarFormParams.append('TDDate', <any>tDDate) as any || localVarFormParams;
        }
        if (tRDate !== undefined) {
            localVarFormParams = localVarFormParams.append('TRDate', <any>tRDate) as any || localVarFormParams;
        }
        if (lDDate !== undefined) {
            localVarFormParams = localVarFormParams.append('LDDate', <any>lDDate) as any || localVarFormParams;
        }
        if (lRDate !== undefined) {
            localVarFormParams = localVarFormParams.append('LRDate', <any>lRDate) as any || localVarFormParams;
        }
        if (cDDate !== undefined) {
            localVarFormParams = localVarFormParams.append('CDDate', <any>cDDate) as any || localVarFormParams;
        }
        if (approvalDate !== undefined) {
            localVarFormParams = localVarFormParams.append('ApprovalDate', <any>approvalDate) as any || localVarFormParams;
        }
        if (materialLeaderId !== undefined) {
            localVarFormParams = localVarFormParams.append('MaterialLeaderId', <any>materialLeaderId) as any || localVarFormParams;
        }
        if (testLeaderId !== undefined) {
            localVarFormParams = localVarFormParams.append('TestLeaderId', <any>testLeaderId) as any || localVarFormParams;
        }
        if (marketSegmentId !== undefined) {
            localVarFormParams = localVarFormParams.append('MarketSegmentId', <any>marketSegmentId) as any || localVarFormParams;
        }
        if (ingenieurRFQId !== undefined) {
            localVarFormParams = localVarFormParams.append('IngenieurRFQId', <any>ingenieurRFQId) as any || localVarFormParams;
        }
        if (vALeaderId !== undefined) {
            localVarFormParams = localVarFormParams.append('VALeaderId', <any>vALeaderId) as any || localVarFormParams;
        }
        if (clientId !== undefined) {
            localVarFormParams = localVarFormParams.append('ClientId', <any>clientId) as any || localVarFormParams;
        }
        if (valide !== undefined) {
            localVarFormParams = localVarFormParams.append('Valide', <any>valide) as any || localVarFormParams;
        }
        if (rejete !== undefined) {
            localVarFormParams = localVarFormParams.append('Rejete', <any>rejete) as any || localVarFormParams;
        }
        if (file !== undefined) {
            localVarFormParams = localVarFormParams.append('File', <any>file) as any || localVarFormParams;
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/VersionRFQ/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int32"})}`;
        return this.httpClient.request<VersionRFQ>('put', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: localVarConvertFormParamsToString ? localVarFormParams.toString() : localVarFormParams,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiVersionRFQIdRejeterPost(id: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any>;
    public apiVersionRFQIdRejeterPost(id: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<any>>;
    public apiVersionRFQIdRejeterPost(id: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<any>>;
    public apiVersionRFQIdRejeterPost(id: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling apiVersionRFQIdRejeterPost.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Bearer) required
        localVarCredential = this.configuration.lookupCredential('Bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/VersionRFQ/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int32"})}/rejeter`;
        return this.httpClient.request<any>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiVersionRFQIdValiderPost(id: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any>;
    public apiVersionRFQIdValiderPost(id: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<any>>;
    public apiVersionRFQIdValiderPost(id: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<any>>;
    public apiVersionRFQIdValiderPost(id: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling apiVersionRFQIdValiderPost.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Bearer) required
        localVarCredential = this.configuration.lookupCredential('Bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/VersionRFQ/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int32"})}/valider`;
        return this.httpClient.request<any>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param rFQId 
     * @param cQ 
     * @param quoteName 
     * @param numRefQuoted 
     * @param sOPDate 
     * @param maxV 
     * @param estV 
     * @param statut 
     * @param kODate 
     * @param customerDataDate 
     * @param mDDate 
     * @param mRDate 
     * @param tDDate 
     * @param tRDate 
     * @param lDDate 
     * @param lRDate 
     * @param cDDate 
     * @param approvalDate 
     * @param materialLeaderId 
     * @param testLeaderId 
     * @param marketSegmentId 
     * @param ingenieurRFQId 
     * @param vALeaderId 
     * @param clientId 
     * @param valide 
     * @param rejete 
     * @param file 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiVersionRFQPost(rFQId?: number, cQ?: number, quoteName?: string, numRefQuoted?: number, sOPDate?: string, maxV?: number, estV?: number, statut?: Statut, kODate?: string, customerDataDate?: string, mDDate?: string, mRDate?: string, tDDate?: string, tRDate?: string, lDDate?: string, lRDate?: string, cDDate?: string, approvalDate?: string, materialLeaderId?: number, testLeaderId?: number, marketSegmentId?: number, ingenieurRFQId?: number, vALeaderId?: number, clientId?: number, valide?: boolean, rejete?: boolean, file?: Blob, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext, transferCache?: boolean}): Observable<VersionRFQ>;
    public apiVersionRFQPost(rFQId?: number, cQ?: number, quoteName?: string, numRefQuoted?: number, sOPDate?: string, maxV?: number, estV?: number, statut?: Statut, kODate?: string, customerDataDate?: string, mDDate?: string, mRDate?: string, tDDate?: string, tRDate?: string, lDDate?: string, lRDate?: string, cDDate?: string, approvalDate?: string, materialLeaderId?: number, testLeaderId?: number, marketSegmentId?: number, ingenieurRFQId?: number, vALeaderId?: number, clientId?: number, valide?: boolean, rejete?: boolean, file?: Blob, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<VersionRFQ>>;
    public apiVersionRFQPost(rFQId?: number, cQ?: number, quoteName?: string, numRefQuoted?: number, sOPDate?: string, maxV?: number, estV?: number, statut?: Statut, kODate?: string, customerDataDate?: string, mDDate?: string, mRDate?: string, tDDate?: string, tRDate?: string, lDDate?: string, lRDate?: string, cDDate?: string, approvalDate?: string, materialLeaderId?: number, testLeaderId?: number, marketSegmentId?: number, ingenieurRFQId?: number, vALeaderId?: number, clientId?: number, valide?: boolean, rejete?: boolean, file?: Blob, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<VersionRFQ>>;
    public apiVersionRFQPost(rFQId?: number, cQ?: number, quoteName?: string, numRefQuoted?: number, sOPDate?: string, maxV?: number, estV?: number, statut?: Statut, kODate?: string, customerDataDate?: string, mDDate?: string, mRDate?: string, tDDate?: string, tRDate?: string, lDDate?: string, lRDate?: string, cDDate?: string, approvalDate?: string, materialLeaderId?: number, testLeaderId?: number, marketSegmentId?: number, ingenieurRFQId?: number, vALeaderId?: number, clientId?: number, valide?: boolean, rejete?: boolean, file?: Blob, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Bearer) required
        localVarCredential = this.configuration.lookupCredential('Bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let localVarFormParams: { append(param: string, value: any): any; };
        let localVarUseForm = false;
        let localVarConvertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        localVarUseForm = canConsumeForm;
        if (localVarUseForm) {
            localVarFormParams = new FormData();
        } else {
            localVarFormParams = new HttpParams({encoder: this.encoder});
        }

        if (rFQId !== undefined) {
            localVarFormParams = localVarFormParams.append('RFQId', <any>rFQId) as any || localVarFormParams;
        }
        if (cQ !== undefined) {
            localVarFormParams = localVarFormParams.append('CQ', <any>cQ) as any || localVarFormParams;
        }
        if (quoteName !== undefined) {
            localVarFormParams = localVarFormParams.append('QuoteName', <any>quoteName) as any || localVarFormParams;
        }
        if (numRefQuoted !== undefined) {
            localVarFormParams = localVarFormParams.append('NumRefQuoted', <any>numRefQuoted) as any || localVarFormParams;
        }
        if (sOPDate !== undefined) {
            localVarFormParams = localVarFormParams.append('SOPDate', <any>sOPDate) as any || localVarFormParams;
        }
        if (maxV !== undefined) {
            localVarFormParams = localVarFormParams.append('MaxV', <any>maxV) as any || localVarFormParams;
        }
        if (estV !== undefined) {
            localVarFormParams = localVarFormParams.append('EstV', <any>estV) as any || localVarFormParams;
        }
        if (statut !== undefined) {
            localVarFormParams = localVarFormParams.append('Statut', <any>statut) as any || localVarFormParams;
        }
        if (kODate !== undefined) {
            localVarFormParams = localVarFormParams.append('KODate', <any>kODate) as any || localVarFormParams;
        }
        if (customerDataDate !== undefined) {
            localVarFormParams = localVarFormParams.append('CustomerDataDate', <any>customerDataDate) as any || localVarFormParams;
        }
        if (mDDate !== undefined) {
            localVarFormParams = localVarFormParams.append('MDDate', <any>mDDate) as any || localVarFormParams;
        }
        if (mRDate !== undefined) {
            localVarFormParams = localVarFormParams.append('MRDate', <any>mRDate) as any || localVarFormParams;
        }
        if (tDDate !== undefined) {
            localVarFormParams = localVarFormParams.append('TDDate', <any>tDDate) as any || localVarFormParams;
        }
        if (tRDate !== undefined) {
            localVarFormParams = localVarFormParams.append('TRDate', <any>tRDate) as any || localVarFormParams;
        }
        if (lDDate !== undefined) {
            localVarFormParams = localVarFormParams.append('LDDate', <any>lDDate) as any || localVarFormParams;
        }
        if (lRDate !== undefined) {
            localVarFormParams = localVarFormParams.append('LRDate', <any>lRDate) as any || localVarFormParams;
        }
        if (cDDate !== undefined) {
            localVarFormParams = localVarFormParams.append('CDDate', <any>cDDate) as any || localVarFormParams;
        }
        if (approvalDate !== undefined) {
            localVarFormParams = localVarFormParams.append('ApprovalDate', <any>approvalDate) as any || localVarFormParams;
        }
        if (materialLeaderId !== undefined) {
            localVarFormParams = localVarFormParams.append('MaterialLeaderId', <any>materialLeaderId) as any || localVarFormParams;
        }
        if (testLeaderId !== undefined) {
            localVarFormParams = localVarFormParams.append('TestLeaderId', <any>testLeaderId) as any || localVarFormParams;
        }
        if (marketSegmentId !== undefined) {
            localVarFormParams = localVarFormParams.append('MarketSegmentId', <any>marketSegmentId) as any || localVarFormParams;
        }
        if (ingenieurRFQId !== undefined) {
            localVarFormParams = localVarFormParams.append('IngenieurRFQId', <any>ingenieurRFQId) as any || localVarFormParams;
        }
        if (vALeaderId !== undefined) {
            localVarFormParams = localVarFormParams.append('VALeaderId', <any>vALeaderId) as any || localVarFormParams;
        }
        if (clientId !== undefined) {
            localVarFormParams = localVarFormParams.append('ClientId', <any>clientId) as any || localVarFormParams;
        }
        if (valide !== undefined) {
            localVarFormParams = localVarFormParams.append('Valide', <any>valide) as any || localVarFormParams;
        }
        if (rejete !== undefined) {
            localVarFormParams = localVarFormParams.append('Rejete', <any>rejete) as any || localVarFormParams;
        }
        if (file !== undefined) {
            localVarFormParams = localVarFormParams.append('File', <any>file) as any || localVarFormParams;
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/VersionRFQ`;
        return this.httpClient.request<VersionRFQ>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: localVarConvertFormParamsToString ? localVarFormParams.toString() : localVarFormParams,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

}
